#!/bin/bash
# patch - front-end job for patching remote servers
#RCJOBREQUIREVARS="PATCHWHEN CONTACT PATCHHOST RCADMINMAIL"
#RCJOBREQUIREDEFS="RCADMINMAIL"
# This job should do pre-flight check, then schedule the dopatch job

source $RCROOT/libslocal/common.sh
source $RCROOT/libslocal/joblib.sh

usage(){
	cat <<"EOF"
Usage: patch (FORCE=true) (PRENOTIFY=true) (NOTIFYWHEN=<timespec>) \
	(PATCHWHEN=<timespec>) CONTACT=<email> PATCHHOST=<host>

Patch a system at the given time, sending pre-(if configured) and post-
notifications to CONTACT.
EOF
	exit ${1:-1}
}

if [ "$1" = "help" ]
then
	usage 0
fi

# Depvars should handle dependencies between variables and error checking
# of values
depvars(){
	if [ '$PRENOTIFY' = "true" ]
	then
		addrequired NOTIFYWHEN
	else
		removerequired NOTIFYWHEN
	fi
	HOSTCOUNT=($PATCHHOST)
	[ ${#HOSTCOUNT[@]} -gt 1 ] && { echo "Can only run patch on a single host at a time"; usage; }
}

# Now let rc handle simple verification that vars exist, creating a resume file if needed
processvars

# Sanity check - can the host even be reached?
status "Checking connectivity to $PATCHHOST..."
#rcdo ping $PATCHHOST || { echo "Unable to reach $PATCHHOST"; exit 1; }
rcdo ping $PATCHHOST
echo "OK"

if [ "$FORCE" != "true" ]
then
	status "Checking if patches are needed..."
	# It's normal to get an error return from yumcheck
	set +e
	trap - ERR
	rcdo yumcheck $PATCHHOST
	YCRETVAL=$?
	set -e
	jobtrap # alias defined in libslocal/errhandle.sh
	if [ $YCRETVAL -eq 100 ]
	then
		echo "Patching is required"
	elif [ $YCRETVAL -eq 0 ]
	then
		echo "No patching required; set FORCE=TRUE to force"
		exit 0
	else
		echo "Error $YCRETVAL returned from yum check-update, aborting."
		exit 1
	fi
fi

# If the user is to be notified ahead of time (-n used),
# schedule the at job.
if [ "$PRENOTIFY" = "true" ]
then
	status "Pre-notification requesting, setting up automated email for \"$NOTIFYWHEN\""
	eval PREPATCHSUBJECT=\""$PREPATCHSUBJECT"\"
	eval PREPATCHMESSAGE=\""$PREPATCHMESSAGE"\"
	NOTIFYJOB=$(cat <<EOF
mail -r $RCADMINMAIL -s "$PREPATCHSUBJECT" $CONTACT <<MEOF
$PREPATCHMESSAGE
MEOF
EOF
)
	echo "job: at $NOTIFYWHEN"
	cat <<<"$NOTIFYJOB"
	at $NOTIFYWHEN <<<"$NOTIFYJOB"
	echo "Done"
fi

# Schedule the actual patch job

PATCHJOB=$(cat <<EOF
rcrun dopatch "RCADMINMAIL=$RCADMINMAIL" "CONTACT=$CONTACT" PATCHHOST=$PATCHHOST
EOF
)
status "Scheduling patching job at \"$PATCHWHEN\""
echo "job: at $PATCHWHEN"
cat <<<"$PATCHJOB"
at $PATCHWHEN <<<"$PATCHJOB"
exit 0
